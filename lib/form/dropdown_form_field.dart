import 'package:flutter/material.dart';

import '../field/dropdown_field.dart';
import '../field/picker_field.dart';
import '../utils/basic_types.dart';
import 'form_field.dart';
import 'picker_form_field.dart';

/// 下拉选择Form组件
@Deprecated(
  'Use TxDropdownFormFieldTile instead. '
  'This feature was deprecated after v0.3.0.',
)
class DropdownFormField<T, V> extends TxDropdownFormField<T, V> {
  @Deprecated(
    'Use TxDropdownFormFieldTile instead. '
    'This feature was deprecated after v0.3.0.',
  )
  DropdownFormField({
    required super.labelMapper,
    required List<T>? sources,
    super.valueMapper,
    super.enabledMapper,
    super.key,
    super.initialValue,
    super.initialData,
    super.onChanged,
    super.onSaved,
    super.validator,
    super.enabled,
    super.autovalidateMode = AutovalidateMode.disabled,
    super.labelText,
    super.labelTextAlign,
    super.labelOverflow,
    Widget? label,
    super.required,
    Color? backgroundColor,
    super.labelStyle,
    Axis? direction,
    super.padding,
    super.horizontalGap,
    super.minLabelWidth,
    super.hint,
    super.disabledHint,
    super.onTap,
    super.elevation,
    super.style,
    super.icon,
    super.iconDisabledColor,
    super.iconEnabledColor,
    super.iconSize,
    super.isDense,
    super.isExpanded,
    super.itemHeight,
    super.focusColor,
    super.focusNode,
    super.autofocus,
    super.dropdownColor,
    super.decoration,
    super.menuMaxHeight,
    super.alignment,
    super.borderRadius,
  }) : super(
          source: sources ?? [],
          label: label,
          tileColor: backgroundColor,
          layoutDirection: direction,
        );
}

/// 下拉选择框表单
class TxDropdownFormField<T, V> extends TxFormField<T> {
  TxDropdownFormField({
    required List<T> source,
    required ValueMapper<T, String?> labelMapper,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    T? initialData,
    V? initialValue,
    super.key,
    super.onSaved,
    FormFieldValidator<T>? validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.decoration,
    super.onChanged,
    super.required,
    super.bordered,
    FocusNode? focusNode,
    String? hintText,
    TextAlign? textAlign,
    Widget? hint,
    Widget? disabledHint,
    VoidCallback? onTap,
    int? elevation,
    TextStyle? style,
    Widget? icon,
    Color? iconDisabledColor,
    Color? iconEnabledColor,
    double? iconSize,
    bool? isDense,
    bool? isExpanded,
    double? itemHeight,
    Color? focusColor,
    bool? autofocus,
    Color? dropdownColor,
    double? menuMaxHeight,
    bool? enableFeedback,
    AlignmentGeometry alignment = AlignmentDirectional.centerStart,
    BorderRadius? borderRadius,
    EdgeInsetsGeometry? menuPadding,
    DropdownButtonBuilder? selectedItemBuilder,
    super.label,
    super.labelText,
    super.labelTextAlign,
    super.labelOverflow,
    super.padding,
    super.actionsBuilder,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailingBuilder,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.minLeadingWidth,
    super.dense,
    super.colon,
    super.minLabelWidth,
    super.minVerticalPadding,
  }) : super(
          initialValue: TxPickerField.initData(
            source,
            initialData,
            initialValue,
            valueMapper,
          ),
          builder: (field) {
            return TxDropdownField<T, V>(
              source: source,
              labelMapper: labelMapper,
              valueMapper: valueMapper,
              enabledMapper: enabledMapper,
              hintText: hintText,
              textAlign: textAlign,
              enabled: enabled,
              selectedItemBuilder: selectedItemBuilder,
              initialData: field.value,
              hint: hint,
              bordered: bordered,
              onChanged: field.didChange,
              onTap: onTap,
              elevation: elevation,
              style: style,
              icon: icon,
              iconDisabledColor: iconDisabledColor,
              iconEnabledColor: iconEnabledColor,
              iconSize: iconSize,
              isDense: isDense,
              isExpanded: isExpanded,
              itemHeight: itemHeight,
              focusColor: focusColor,
              focusNode: focusNode,
              autofocus: autofocus,
              dropdownColor: dropdownColor,
              decoration: field.effectiveDecoration,
              menuMaxHeight: menuMaxHeight,
              enableFeedback: enableFeedback,
              alignment: alignment,
              borderRadius: borderRadius,
              menuPadding: menuPadding,
              label: field.effectiveLabel,
              labelTextAlign: labelTextAlign,
              padding: padding,
              actionsBuilder: actionsBuilder,
              trailingBuilder: trailingBuilder,
              labelStyle: labelStyle,
              horizontalGap: horizontalGap,
              tileColor: tileColor,
              layoutDirection: layoutDirection,
              leading: leading,
              visualDensity: visualDensity,
              shape: shape,
              iconColor: iconColor,
              textColor: textColor,
              leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
              minLeadingWidth: minLeadingWidth,
              minLabelWidth: minLabelWidth,
              minVerticalPadding: minVerticalPadding,
              dense: dense,
              colon: colon,
            );
          },
          validator: (val) =>
              TxPickerFormField.generateValidator(val, validator, required),
        );

  TxDropdownFormField.custom({
    required List<DropdownMenuItem<T>> items,
    super.key,
    super.initialValue,
    super.onSaved,
    FormFieldValidator<T>? validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.decoration,
    super.onChanged,
    super.required,
    FocusNode? focusNode,
    String? hintText,
    TextAlign? textAlign,
    Widget? hint,
    Widget? disabledHint,
    VoidCallback? onTap,
    int? elevation,
    TextStyle? style,
    Widget? icon,
    Color? iconDisabledColor,
    Color? iconEnabledColor,
    double? iconSize,
    bool? isDense,
    bool? isExpanded,
    double? itemHeight,
    Color? focusColor,
    bool? autofocus,
    Color? dropdownColor,
    double? menuMaxHeight,
    bool? enableFeedback,
    AlignmentGeometry alignment = AlignmentDirectional.centerStart,
    BorderRadius? borderRadius,
    EdgeInsetsGeometry? menuPadding,
    DropdownButtonBuilder? selectedItemBuilder,
    super.label,
    super.labelText,
    super.labelTextAlign,
    super.labelOverflow,
    super.padding,
    super.actionsBuilder,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailingBuilder,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.minLeadingWidth,
    super.dense,
    super.colon,
    super.minLabelWidth,
    super.minVerticalPadding,
  }) : super(
          builder: (field) {
            return TxDropdownField<T, V>.custom(
              items: items,
              hintText: hintText,
              textAlign: textAlign,
              enabled: enabled,
              selectedItemBuilder: selectedItemBuilder,
              initialValue: field.value,
              hint: hint,
              onChanged: field.didChange,
              onTap: onTap,
              elevation: elevation,
              style: style,
              icon: icon,
              iconDisabledColor: iconDisabledColor,
              iconEnabledColor: iconEnabledColor,
              iconSize: iconSize,
              isDense: isDense,
              isExpanded: isExpanded,
              itemHeight: itemHeight,
              focusColor: focusColor,
              focusNode: focusNode,
              autofocus: autofocus,
              dropdownColor: dropdownColor,
              decoration: field.effectiveDecoration,
              menuMaxHeight: menuMaxHeight,
              enableFeedback: enableFeedback,
              alignment: alignment,
              borderRadius: borderRadius,
              menuPadding: menuPadding,
              label: field.effectiveLabel,
              labelTextAlign: labelTextAlign,
              padding: padding,
              actionsBuilder: actionsBuilder,
              trailingBuilder: trailingBuilder,
              labelStyle: labelStyle,
              horizontalGap: horizontalGap,
              tileColor: tileColor,
              layoutDirection: layoutDirection,
              leading: leading,
              visualDensity: visualDensity,
              shape: shape,
              iconColor: iconColor,
              textColor: textColor,
              leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
              minLeadingWidth: minLeadingWidth,
              minLabelWidth: minLabelWidth,
              minVerticalPadding: minVerticalPadding,
              dense: dense,
              colon: colon,
            );
          },
          validator: (val) =>
              TxPickerFormField.generateValidator(val, validator, required),
        );
}
