import 'package:flutter/material.dart';

import '../field/dropdown_field.dart';
import '../utils/basic_types.dart';
import 'form_field_tile.dart';

/// 下拉选择Form组件
@Deprecated(
  'Use TxDropdownFormFieldTile instead. '
  'This feature was deprecated after v0.3.0.',
)
class DropdownFormField<T, V> extends TxDropdownFormFieldTile<T, V> {
  @Deprecated(
    'Use TxDropdownFormFieldTile instead. '
    'This feature was deprecated after v0.3.0.',
  )
  DropdownFormField({
    required super.labelMapper,
    required List<T>? sources,
    super.valueMapper,
    super.enabledMapper,
    super.key,
    super.initialValue,
    super.initialData,
    super.onChanged,
    super.onSaved,
    super.validator,
    super.enabled,
    super.autovalidateMode = AutovalidateMode.disabled,
    super.labelText,
    Widget? label,
    super.required,
    Color? backgroundColor,
    super.labelStyle,
    Axis? direction,
    super.padding,
    super.horizontalGap,
    super.minLabelWidth,
    super.hint,
    super.disabledHint,
    super.onTap,
    super.elevation,
    super.style,
    super.icon,
    super.iconDisabledColor,
    super.iconEnabledColor,
    super.iconSize,
    super.isDense,
    super.isExpanded,
    super.itemHeight,
    super.focusColor,
    super.focusNode,
    super.autofocus,
    super.dropdownColor,
    super.decoration,
    super.menuMaxHeight,
    super.alignment,
    super.borderRadius,
  }) : super(
          source: sources ?? [],
          labelBuilder: label == null ? null : (context) => label,
          tileColor: backgroundColor,
          layoutDirection: direction,
        );
}

/// 下拉选择框表单
class TxDropdownFormField<T, V> extends TxDropdownField<T, V> {
  TxDropdownFormField({
    required super.source,
    required super.labelMapper,
    super.valueMapper,
    super.enabledMapper,
    super.initialData,
    super.initialValue,
    super.key,
    super.hint,
    super.disabledHint,
    super.onChanged,
    super.onTap,
    super.elevation,
    super.style,
    super.icon,
    super.iconDisabledColor,
    super.iconEnabledColor,
    super.iconSize,
    super.isDense,
    super.isExpanded,
    super.itemHeight,
    super.focusColor,
    super.focusNode,
    super.autofocus,
    super.dropdownColor,
    super.decoration,
    super.menuMaxHeight,
    super.enableFeedback,
    super.alignment,
    super.borderRadius,
    super.padding,
    super.selectedItemBuilder,
    super.enabled,
    super.onSaved,
    super.validator,
    super.autovalidateMode,
    super.required,
  }) : super.form();

  const TxDropdownFormField.custom({
    required super.items,
    super.initialValue,
    super.key,
    super.hint,
    super.disabledHint,
    super.onChanged,
    super.onTap,
    super.elevation,
    super.style,
    super.icon,
    super.iconDisabledColor,
    super.iconEnabledColor,
    super.iconSize,
    super.isDense,
    super.isExpanded,
    super.itemHeight,
    super.focusColor,
    super.focusNode,
    super.autofocus,
    super.dropdownColor,
    super.decoration,
    super.menuMaxHeight,
    super.enableFeedback,
    super.alignment,
    super.borderRadius,
    super.padding,
    super.selectedItemBuilder,
    super.enabled,
    super.onSaved,
    super.validator,
    super.autovalidateMode,
    super.required,
  }) : super.customForm();
}

/// [field] 为下拉选择框表单的 [TxFormFieldTile]
class TxDropdownFormFieldTile<T, V> extends TxFormFieldTile {
  TxDropdownFormFieldTile({
    required List<T> source,
    required ValueMapper<T, String?> labelMapper,
    super.key,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    T? initialData,
    V? initialValue,
    DropdownButtonBuilder? selectedItemBuilder,
    Widget? hint,
    Widget? disabledHint,
    ValueChanged<T?>? onChanged,
    int? elevation,
    TextStyle? style,
    Widget? icon,
    Color? iconDisabledColor,
    Color? iconEnabledColor,
    double? iconSize,
    bool? isDense,
    bool? isExpanded,
    double? itemHeight,
    Color? focusColor,
    FocusNode? focusNode,
    bool? autofocus,
    Color? dropdownColor,
    InputDecoration? decoration,
    double? menuMaxHeight,
    bool? enableFeedback,
    AlignmentGeometry alignment = AlignmentDirectional.centerStart,
    BorderRadius? borderRadius,
    super.onSaved,
    super.validator,
    super.autovalidateMode,
    super.required,
    super.labelBuilder,
    super.labelText,
    super.padding,
    super.actions,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailing,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.enabled = true,
    super.onTap,
    super.minLeadingWidth,
    super.dense,
    super.minLabelWidth,
    super.minVerticalPadding,
  }) : super(
          field: TxDropdownFormField<T, V>(
            source: source,
            labelMapper: labelMapper,
            valueMapper: valueMapper,
            enabledMapper: enabledMapper,
            initialData: initialData,
            selectedItemBuilder: selectedItemBuilder,
            initialValue: initialValue,
            hint: hint,
            onChanged: onChanged,
            elevation: elevation,
            style: style,
            icon: icon,
            iconDisabledColor: iconDisabledColor,
            iconEnabledColor: iconEnabledColor,
            iconSize: iconSize,
            isDense: isDense,
            isExpanded: isExpanded,
            itemHeight: itemHeight,
            focusColor: focusColor,
            focusNode: focusNode,
            autofocus: autofocus,
            dropdownColor: dropdownColor,
            decoration: decoration,
            menuMaxHeight: menuMaxHeight,
            enableFeedback: enableFeedback,
            alignment: alignment,
            borderRadius: borderRadius,
            onSaved: onSaved,
            validator: validator,
            autovalidateMode: autovalidateMode,
            required: required,
          ),
        );

  TxDropdownFormFieldTile.custom({
    required List<DropdownMenuItem<T>>? items,
    super.initialValue,
    super.key,
    DropdownButtonBuilder? selectedItemBuilder,
    Widget? hint,
    Widget? disabledHint,
    ValueChanged<T?>? onChanged,
    int? elevation,
    TextStyle? style,
    Widget? icon,
    Color? iconDisabledColor,
    Color? iconEnabledColor,
    double? iconSize,
    bool? isDense,
    bool? isExpanded,
    double? itemHeight,
    Color? focusColor,
    FocusNode? focusNode,
    bool? autofocus,
    Color? dropdownColor,
    InputDecoration? decoration,
    double? menuMaxHeight,
    bool? enableFeedback,
    AlignmentGeometry alignment = AlignmentDirectional.centerStart,
    BorderRadius? borderRadius,
    super.onSaved,
    super.validator,
    super.autovalidateMode,
    super.required,
    super.labelBuilder,
    super.labelText,
    super.padding,
    super.actions,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailing,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.enabled = true,
    super.onTap,
    super.minLeadingWidth,
    super.dense,
    super.minLabelWidth,
    super.minVerticalPadding,
  }) : super(
          field: TxDropdownFormField<T, V>.custom(
            items: items,
            selectedItemBuilder: selectedItemBuilder,
            initialValue: initialValue,
            hint: hint,
            onChanged: onChanged,
            elevation: elevation,
            style: style,
            icon: icon,
            iconDisabledColor: iconDisabledColor,
            iconEnabledColor: iconEnabledColor,
            iconSize: iconSize,
            isDense: isDense,
            isExpanded: isExpanded,
            itemHeight: itemHeight,
            focusColor: focusColor,
            focusNode: focusNode,
            autofocus: autofocus,
            dropdownColor: dropdownColor,
            decoration: decoration,
            menuMaxHeight: menuMaxHeight,
            enableFeedback: enableFeedback,
            alignment: alignment,
            borderRadius: borderRadius,
            onSaved: onSaved,
            validator: validator,
            autovalidateMode: autovalidateMode,
            required: required,
          ),
        );
}
