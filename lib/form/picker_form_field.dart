import 'package:flutter/material.dart';

import '../extensions/iterable_extension.dart';
import '../utils/basic_types.dart';
import '../widgets/picker_bottom_sheet.dart';
import 'form_field.dart';

export '../utils/basic_types.dart' show ValueMapper;
export '../widgets/picker_bottom_sheet.dart' show PickerItemBuilder;

/// 单选Form组件
class PickerFormField<T, V> extends TxPickerTextFormField<T, V> {
  PickerFormField({
    required List<T>? sources,
    required ValueMapper<T, String> labelMapper,
    super.valueMapper,
    ValueMapper<T, String>? subtitleMapper,
    V? initialValue,
    T? initialData,
    PickerItemBuilder<T>? pickerItemBuilder,
    PickerFuture<T>? onPickTap,
    super.key,
    super.onSaved,
    super.validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.required,
    super.label,
    super.labelText,
    super.backgroundColor,
    super.direction,
    super.padding,
    List<Widget>? actions,
    super.labelStyle,
    super.starStyle,
    super.horizontalGap,
    super.minLabelWidth,
    super.controller,
    super.prefixIconMergeMode,
    super.suffixIconMergeMode,
    super.focusNode,
    super.decoration,
    super.keyboardType,
    super.textCapitalization,
    super.textInputAction,
    super.style,
    super.strutStyle,
    super.textDirection,
    super.textAlign,
    super.textAlignVertical,
    super.autofocus,
    super.readonly,
    super.maxLines,
    super.minLines,
    super.maxLength,
    super.onChanged,
    super.onTap,
    super.onEditingComplete,
    super.inputFormatters,
    super.showCursor,
    super.obscuringCharacter,
    super.obscureText,
    super.autocorrect,
    super.smartDashesType,
    super.smartQuotesType,
    super.enableSuggestions,
    super.maxLengthEnforcement,
    super.expands,
    super.onTapOutside,
    super.onFieldSubmitted,
    super.cursorWidth,
    super.cursorHeight,
    super.cursorRadius,
    super.cursorColor,
    super.keyboardAppearance,
    super.scrollPadding,
    super.enableInteractiveSelection,
    super.selectionControls,
    super.buildCounter,
    super.scrollPhysics,
    super.autofillHints,
    super.scrollController,
    super.enableIMEPersonalizedLearning,
    super.mouseCursor,
    super.contextMenuBuilder,
  }) : super(
          labelMapper: (T data) => labelMapper(data),
          initialValue: initialData ??
              sources?.tryFind((e) =>
                  (valueMapper?.call(e) ?? labelMapper(e)) == initialValue),
          onPickTap: (context, data) => showPickerBottomSheet<T, V>(
            context,
            labelMapper: labelMapper,
            valueMapper: valueMapper,
            sources: sources ?? [],
            subtitleMapper: subtitleMapper,
            pickerItemBuilder: pickerItemBuilder,
            initialData: data,
          ),
          actionsBuilder: (field) => actions,
        );
}
