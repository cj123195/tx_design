import 'package:flutter/material.dart';

import '../field/array_field.dart';
import '../utils/basic_types.dart';
import 'form_field.dart';

String? _validator<T>(
  List<T>? value,
  bool? required,
  int? limit,
  FormFieldValidator<List<T>>? validator,
) {
  if (required == true && (value == null || value.isEmpty)) {
    return '请至少添加一项';
  }
  if (limit != null && value != null && value.length > limit) {
    return '最多可添加$limit项';
  }
  if (validator != null) {
    return validator(value);
  }
  return null;
}

/// [builder]  构造的组件为自增列表 的 [FormField]。
class TxArrayFormField<T> extends TxFormField<List<T>> {
  TxArrayFormField({
    required ArrayFieldBuilder<T> builder,
    required ValueMapper<int, T> defaultValue,
    ButtonStyle? addButtonStyle,
    ButtonStyle? actionsButtonStyle,
    int? limit,
    bool? sortable,
    bool? insertable,
    super.key,
    super.onSaved,
    FormFieldValidator<List<T>>? validator,
    super.initialValue,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.decoration,
    super.onChanged,
    super.required,
    super.bordered,
    FocusNode? focusNode,
    String? hintText,
    TextAlign? textAlign,
    super.label,
    super.labelText,
    super.labelTextAlign,
    super.labelOverflow,
    super.padding,
    super.actionsBuilder,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailingBuilder,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.onTap,
    super.minLeadingWidth,
    super.dense,
    super.colon,
    super.minLabelWidth,
    super.focusColor,
    super.minVerticalPadding,
  }) : super(
          builder: (field) {
            return TxArrayField<T>(
              builder: builder,
              defaultValue: defaultValue,
              addButtonStyle: addButtonStyle,
              actionsButtonStyle: actionsButtonStyle,
              bordered: bordered,
              limit: limit,
              sortable: sortable,
              insertable: insertable,
              onChanged: field.didChange,
              decoration: field.effectiveDecoration,
              focusNode: focusNode,
              initialValue: field.value,
              textAlign: textAlign,
              hintText: hintText,
              label: field.effectiveLabel,
              labelTextAlign: labelTextAlign,
              padding: padding,
              actionsBuilder: actionsBuilder,
              trailingBuilder: trailingBuilder,
              labelStyle: labelStyle,
              horizontalGap: horizontalGap,
              tileColor: tileColor,
              layoutDirection: layoutDirection,
              leading: leading,
              visualDensity: visualDensity,
              shape: shape,
              iconColor: iconColor,
              textColor: textColor,
              leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
              enabled: enabled,
              onTap: onTap,
              minLeadingWidth: minLeadingWidth,
              minLabelWidth: minLabelWidth,
              minVerticalPadding: minVerticalPadding,
              dense: dense,
              colon: colon,
              focusColor: focusColor,
            );
          },
          validator: (val) => _validator(val, required, limit, validator),
        );

  TxArrayFormField.builder({
    required ArrayFieldItemBuilder<T> itemBuilder,
    required ValueMapper<int, T> defaultValue,
    ButtonStyle? addButtonStyle,
    ButtonStyle? actionsButtonStyle,
    int? limit,
    bool? sortable,
    bool? insertable,
    FocusNode? focusNode,
    String? hintText,
    TextAlign? textAlign,
    super.key,
    super.onSaved,
    FormFieldValidator<List<T>>? validator,
    super.initialValue,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.decoration,
    super.onChanged,
    super.required,
    super.label,
    super.labelText,
    super.labelTextAlign,
    super.labelOverflow,
    super.padding,
    super.actionsBuilder,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailingBuilder,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.onTap,
    super.minLeadingWidth,
    super.dense,
    super.colon,
    super.minLabelWidth,
    super.focusColor,
    super.minVerticalPadding,
  }) : super(
          builder: (field) {
            return TxArrayField<T>.builder(
              itemBuilder: itemBuilder,
              defaultValue: defaultValue,
              actionsButtonStyle: actionsButtonStyle,
              limit: limit,
              sortable: sortable,
              insertable: insertable,
              addButtonStyle: addButtonStyle,
              initialValue: field.value,
              decoration: field.effectiveDecoration,
              focusNode: focusNode,
              onChanged: field.didChange,
              enabled: enabled,
              hintText: hintText,
              textAlign: textAlign,
              label: field.effectiveLabel,
              labelTextAlign: labelTextAlign,
              padding: padding,
              actionsBuilder: actionsBuilder,
              trailingBuilder: trailingBuilder,
              labelStyle: labelStyle,
              horizontalGap: horizontalGap,
              tileColor: tileColor,
              layoutDirection: layoutDirection,
              leading: leading,
              visualDensity: visualDensity,
              shape: shape,
              iconColor: iconColor,
              textColor: textColor,
              leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
              onTap: onTap,
              minLeadingWidth: minLeadingWidth,
              minLabelWidth: minLabelWidth,
              minVerticalPadding: minVerticalPadding,
              dense: dense,
              colon: colon,
              focusColor: focusColor,
            );
          },
          validator: (val) => _validator(val, required, limit, validator),
        );
}
