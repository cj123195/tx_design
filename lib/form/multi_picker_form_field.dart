import 'package:flutter/material.dart';

import '../field/multi_picker_field.dart';
import '../utils/basic_types.dart';
import 'common_text_form_field.dart';

export '../utils/basic_types.dart' show ValueMapper;
export '../widgets/multi_picker_bottom_sheet.dart' show MultiPickerItemBuilder;

/// 多选Form组件
@Deprecated(
  'Use TxMultiPickerFormFieldTile instead. '
  'This feature was deprecated after v0.3.0.',
)
class MultiPickerFormField<T, V> extends TxMultiPickerFormFieldTile {
  @Deprecated(
    'Use TxMultiPickerFormFieldTile instead. '
    'This feature was deprecated after v0.3.0.',
  )
  MultiPickerFormField({
    required List<T> sources,
    required super.labelMapper,
    super.valueMapper,
    super.enabledMapper,
    int? minPickNumber,
    int? maxPickNumber,
    Set<V>? initialValue,
    Set<T>? initialData,
    super.key,
    super.onSaved,
    super.validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.required,
    Widget? label,
    super.labelText,
    Color? backgroundColor,
    Axis? direction,
    super.padding,
    super.actions,
    super.labelStyle,
    super.horizontalGap,
    super.minLabelWidth,
    super.controller,
    super.focusNode,
    super.decoration,
    super.keyboardType,
    super.textCapitalization,
    super.textInputAction,
    super.style,
    super.strutStyle,
    super.textDirection,
    super.textAlign,
    super.textAlignVertical,
    super.autofocus,
    super.readOnly,
    super.maxLines,
    super.minLines,
    super.maxLength,
    super.onChanged,
    super.onEditingComplete,
    super.inputFormatters,
    super.showCursor,
    super.obscuringCharacter,
    super.obscureText,
    super.autocorrect,
    super.smartDashesType,
    super.smartQuotesType,
    super.enableSuggestions,
    super.maxLengthEnforcement,
    super.expands,
    super.onTapOutside,
    super.onFieldSubmitted,
    super.cursorWidth,
    super.cursorHeight,
    super.cursorRadius,
    super.cursorColor,
    super.keyboardAppearance,
    super.scrollPadding,
    super.enableInteractiveSelection,
    super.selectionControls,
    super.buildCounter,
    super.scrollPhysics,
    super.autofillHints,
    super.scrollController,
    super.enableIMEPersonalizedLearning,
    super.mouseCursor,
    super.contextMenuBuilder,
  }) : super(
          source: sources,
          minCount: minPickNumber,
          maxCount: maxPickNumber,
          initialValue: initialValue?.toList(),
          initialData: initialData?.toList(),
          labelBuilder: label == null ? null : (context) => label,
          tileColor: backgroundColor,
          layoutDirection: direction,
        );
}

/// [builder] 构建组件为多项选择框的 [FormField]
class TxMultiPickerFormField<T, V> extends TxCommonTextFormField<List<T>> {
  TxMultiPickerFormField({
    required List<T> source,
    required ValueMapper<T, String?> labelMapper,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    List<T>? initialData,
    List<V>? initialValue,
    int? minCount,
    int? maxCount,
    String splitCharacter = '、',
    super.key,
    super.controller,
    super.focusNode,
    super.decoration,
    super.keyboardType,
    super.textCapitalization,
    super.textInputAction,
    super.style,
    super.strutStyle,
    super.textDirection,
    super.textAlign,
    super.textAlignVertical,
    super.autofocus,
    super.readOnly = true,
    super.showCursor,
    super.obscuringCharacter,
    super.obscureText,
    super.autocorrect,
    super.smartDashesType,
    super.smartQuotesType,
    super.enableSuggestions,
    super.maxLengthEnforcement,
    super.maxLines,
    super.minLines,
    super.expands,
    super.maxLength,
    super.onChanged,
    super.onTapAlwaysCalled,
    super.onTapOutside,
    super.onEditingComplete,
    super.onFieldSubmitted,
    super.inputFormatters,
    super.cursorWidth,
    super.cursorHeight,
    super.cursorColor,
    super.cursorRadius,
    super.cursorErrorColor,
    super.keyboardAppearance,
    super.scrollPadding,
    super.enableInteractiveSelection,
    super.selectionControls,
    super.buildCounter,
    super.scrollPhysics,
    super.autofillHints,
    super.scrollController,
    super.enableIMEPersonalizedLearning,
    super.mouseCursor,
    super.contextMenuBuilder,
    super.spellCheckConfiguration,
    super.magnifierConfiguration,
    super.undoController,
    super.onAppPrivateCommand,
    super.cursorOpacityAnimates,
    super.selectionHeightStyle,
    super.selectionWidthStyle,
    super.dragStartBehavior,
    super.contentInsertionConfiguration,
    super.statesController,
    super.clipBehavior,
    super.scribbleEnabled,
    super.canRequestFocus,
    super.onSaved,
    FormFieldValidator<List<T>>? validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.required,
  }) : super(
          initialValue: TxMultiPickerField.initData<T, V>(
            source,
            initialData,
            initialValue,
            valueMapper,
          ),
          builder: (field, decoration, onChanged) {
            return TxMultiPickerField<T, V>(
              source: source,
              labelMapper: labelMapper,
              valueMapper: valueMapper,
              enabledMapper: enabledMapper,
              initialData: field.value,
              minCount: minCount,
              maxCount: maxCount,
              splitCharacter: splitCharacter,
              restorationId: restorationId,
              controller: controller,
              focusNode: focusNode,
              decoration: decoration,
              keyboardType: keyboardType,
              textInputAction: textInputAction,
              style: style,
              strutStyle: strutStyle,
              textAlign: textAlign,
              textAlignVertical: textAlignVertical,
              textDirection: textDirection,
              textCapitalization: textCapitalization,
              autofocus: autofocus,
              statesController: statesController,
              readOnly: readOnly,
              showCursor: showCursor,
              obscuringCharacter: obscuringCharacter,
              obscureText: obscureText,
              autocorrect: autocorrect,
              smartDashesType: smartDashesType,
              smartQuotesType: smartQuotesType,
              enableSuggestions: enableSuggestions,
              maxLengthEnforcement: maxLengthEnforcement,
              maxLines: maxLines,
              minLines: minLines,
              expands: expands,
              maxLength: maxLength,
              onChanged: onChanged,
              onTapAlwaysCalled: onTapAlwaysCalled,
              onTapOutside: onTapOutside,
              onEditingComplete: onEditingComplete,
              onSubmitted: onFieldSubmitted,
              inputFormatters: inputFormatters,
              enabled: enabled,
              cursorWidth: cursorWidth,
              cursorHeight: cursorHeight,
              cursorRadius: cursorRadius,
              cursorColor: cursorColor,
              cursorErrorColor: cursorErrorColor,
              scrollPadding: scrollPadding,
              scrollPhysics: scrollPhysics,
              keyboardAppearance: keyboardAppearance,
              enableInteractiveSelection: enableInteractiveSelection,
              selectionControls: selectionControls,
              buildCounter: buildCounter,
              autofillHints: autofillHints,
              scrollController: scrollController,
              enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
              mouseCursor: mouseCursor,
              contextMenuBuilder: contextMenuBuilder,
              spellCheckConfiguration: spellCheckConfiguration,
              magnifierConfiguration: magnifierConfiguration,
              undoController: undoController,
              onAppPrivateCommand: onAppPrivateCommand,
              cursorOpacityAnimates: cursorOpacityAnimates,
              selectionHeightStyle: selectionHeightStyle,
              selectionWidthStyle: selectionWidthStyle,
              dragStartBehavior: dragStartBehavior,
              contentInsertionConfiguration: contentInsertionConfiguration,
              clipBehavior: clipBehavior,
              scribbleEnabled: scribbleEnabled,
              canRequestFocus: canRequestFocus,
            );
          },
          validator: (data) =>
              generateValidator(data, validator, required, minCount, maxCount),
        );

  TxMultiPickerFormField.custom({
    required MultiPickVoidCallback<T>? onPickTap,
    required String? Function(T data)? displayTextMapper,
    String splitCharacter = '、',
    int? minCount,
    int? maxCount,
    super.initialValue,
    super.key,
    super.controller,
    super.focusNode,
    super.decoration,
    super.keyboardType,
    super.textCapitalization,
    super.textInputAction,
    super.style,
    super.strutStyle,
    super.textDirection,
    super.textAlign,
    super.textAlignVertical,
    super.autofocus,
    super.readOnly = true,
    super.showCursor,
    super.obscuringCharacter,
    super.obscureText,
    super.autocorrect,
    super.smartDashesType,
    super.smartQuotesType,
    super.enableSuggestions,
    super.maxLengthEnforcement,
    super.maxLines,
    super.minLines,
    super.expands,
    super.maxLength,
    super.onChanged,
    super.onTapAlwaysCalled,
    super.onTapOutside,
    super.onEditingComplete,
    super.onFieldSubmitted,
    super.inputFormatters,
    super.cursorWidth,
    super.cursorHeight,
    super.cursorColor,
    super.cursorRadius,
    super.cursorErrorColor,
    super.keyboardAppearance,
    super.scrollPadding,
    super.enableInteractiveSelection,
    super.selectionControls,
    super.buildCounter,
    super.scrollPhysics,
    super.autofillHints,
    super.scrollController,
    super.enableIMEPersonalizedLearning,
    super.mouseCursor,
    super.contextMenuBuilder,
    super.spellCheckConfiguration,
    super.magnifierConfiguration,
    super.undoController,
    super.onAppPrivateCommand,
    super.cursorOpacityAnimates,
    super.selectionHeightStyle,
    super.selectionWidthStyle,
    super.dragStartBehavior,
    super.contentInsertionConfiguration,
    super.statesController,
    super.clipBehavior,
    super.scribbleEnabled,
    super.canRequestFocus,
    super.onSaved,
    FormFieldValidator<List<T>>? validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.required,
  }) : super(
          builder: (field, decoration, onChanged) {
            return TxMultiPickerField<T, V>.custom(
              onPickTap: onPickTap,
              initialValue: field.value,
              displayTextMapper: displayTextMapper,
              splitCharacter: splitCharacter,
              restorationId: restorationId,
              controller: controller,
              focusNode: focusNode,
              decoration: decoration,
              keyboardType: keyboardType,
              textInputAction: textInputAction,
              style: style,
              strutStyle: strutStyle,
              textAlign: textAlign,
              textAlignVertical: textAlignVertical,
              textDirection: textDirection,
              textCapitalization: textCapitalization,
              autofocus: autofocus,
              statesController: statesController,
              readOnly: readOnly,
              showCursor: showCursor,
              obscuringCharacter: obscuringCharacter,
              obscureText: obscureText,
              autocorrect: autocorrect,
              smartDashesType: smartDashesType,
              smartQuotesType: smartQuotesType,
              enableSuggestions: enableSuggestions,
              maxLengthEnforcement: maxLengthEnforcement,
              maxLines: maxLines,
              minLines: minLines,
              expands: expands,
              maxLength: maxLength,
              onChanged: onChanged,
              onTapAlwaysCalled: onTapAlwaysCalled,
              onTapOutside: onTapOutside,
              onEditingComplete: onEditingComplete,
              onSubmitted: onFieldSubmitted,
              inputFormatters: inputFormatters,
              enabled: enabled,
              cursorWidth: cursorWidth,
              cursorHeight: cursorHeight,
              cursorRadius: cursorRadius,
              cursorColor: cursorColor,
              cursorErrorColor: cursorErrorColor,
              scrollPadding: scrollPadding,
              scrollPhysics: scrollPhysics,
              keyboardAppearance: keyboardAppearance,
              enableInteractiveSelection: enableInteractiveSelection,
              selectionControls: selectionControls,
              buildCounter: buildCounter,
              autofillHints: autofillHints,
              scrollController: scrollController,
              enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
              mouseCursor: mouseCursor,
              contextMenuBuilder: contextMenuBuilder,
              spellCheckConfiguration: spellCheckConfiguration,
              magnifierConfiguration: magnifierConfiguration,
              undoController: undoController,
              onAppPrivateCommand: onAppPrivateCommand,
              cursorOpacityAnimates: cursorOpacityAnimates,
              selectionHeightStyle: selectionHeightStyle,
              selectionWidthStyle: selectionWidthStyle,
              dragStartBehavior: dragStartBehavior,
              contentInsertionConfiguration: contentInsertionConfiguration,
              clipBehavior: clipBehavior,
              scribbleEnabled: scribbleEnabled,
              canRequestFocus: canRequestFocus,
            );
          },
          validator: (data) => generateValidator<T>(
            data,
            validator,
            required,
            minCount,
            maxCount,
          ),
        );

  /// 根据当前表单值 [value]、传入验证器 [validator]、 是否必填 [required]、最小选择数量
  /// [minCount]、最大选择 数量 [maxCount] 生成默认验证器法。
  static String? generateValidator<T>(
    List<T>? value,
    FormFieldValidator<List<T>>? validator,
    bool? required,
    int? minCount,
    int? maxCount,
  ) {
    if (required == true && (value == null || value.isEmpty)) {
      return '请选择';
    }

    if (validator != null) {
      final String? errorText = validator(value);
      if (errorText != null) {
        return errorText;
      }
    }

    /// 如果最小数量不为空，判断已选数量是否小于最小数量
    if (minCount != null && (value?.length ?? 0) < minCount) {
      return '请至少选择$minCount项';
    }

    /// 如果最小数量不为空，判断已选数量是否小于最小数量
    if (maxCount != null && (value?.length ?? 0) > maxCount) {
      return '最多可选择$maxCount项';
    }

    return null;
  }
}

/// [field] 为多项选择框表单的 [TxCommonTextFormFieldTile]
class TxMultiPickerFormFieldTile<T, V>
    extends TxCommonTextFormFieldTile<List<T>> {
  TxMultiPickerFormFieldTile({
    required List<T> source,
    required ValueMapper<T, String?> labelMapper,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    List<T>? initialData,
    List<V>? initialValue,
    int? minCount,
    int? maxCount,
    String splitCharacter = '、',
    super.key,
    super.controller,
    super.focusNode,
    super.decoration,
    super.keyboardType,
    super.textCapitalization,
    super.textInputAction,
    super.style,
    super.strutStyle,
    super.textDirection,
    super.textAlign,
    super.textAlignVertical,
    super.autofocus,
    super.readOnly = true,
    super.showCursor,
    super.obscuringCharacter,
    super.obscureText,
    super.autocorrect,
    super.smartDashesType,
    super.smartQuotesType,
    super.enableSuggestions,
    super.maxLengthEnforcement,
    super.maxLines,
    super.minLines,
    super.expands,
    super.maxLength,
    super.onChanged,
    super.onTapAlwaysCalled,
    super.onTapOutside,
    super.onEditingComplete,
    super.onFieldSubmitted,
    super.inputFormatters,
    super.cursorWidth,
    super.cursorHeight,
    super.cursorColor,
    super.cursorRadius,
    super.cursorErrorColor,
    super.keyboardAppearance,
    super.scrollPadding,
    super.enableInteractiveSelection,
    super.selectionControls,
    super.buildCounter,
    super.scrollPhysics,
    super.autofillHints,
    super.scrollController,
    super.enableIMEPersonalizedLearning,
    super.mouseCursor,
    super.contextMenuBuilder,
    super.spellCheckConfiguration,
    super.magnifierConfiguration,
    super.undoController,
    super.onAppPrivateCommand,
    super.cursorOpacityAnimates,
    super.selectionHeightStyle,
    super.selectionWidthStyle,
    super.dragStartBehavior,
    super.contentInsertionConfiguration,
    super.statesController,
    super.clipBehavior,
    super.scribbleEnabled,
    super.canRequestFocus,
    super.onSaved,
    super.validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    bool? required,
    super.labelBuilder,
    super.labelText,
    super.padding,
    super.actions,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailing,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.minLeadingWidth,
    super.minLabelWidth,
    super.minVerticalPadding,
    super.dense,
  }) : super(
          required: required == true && minCount != null && minCount > 0,
          field: TxMultiPickerFormField<T, V>(
            source: source,
            labelMapper: labelMapper,
            valueMapper: valueMapper,
            enabledMapper: enabledMapper,
            initialValue: initialValue,
            initialData: initialData,
            minCount: minCount,
            maxCount: maxCount,
            splitCharacter: splitCharacter,
            enabled: enabled,
            autovalidateMode: autovalidateMode,
            restorationId: restorationId,
            controller: controller,
            focusNode: focusNode,
            decoration: decoration,
            keyboardType: keyboardType,
            textInputAction: textInputAction,
            style: style,
            strutStyle: strutStyle,
            textAlign: textAlign,
            textAlignVertical: textAlignVertical,
            textDirection: textDirection,
            textCapitalization: textCapitalization,
            autofocus: autofocus,
            statesController: statesController,
            readOnly: readOnly,
            showCursor: showCursor,
            obscuringCharacter: obscuringCharacter,
            obscureText: obscureText,
            autocorrect: autocorrect,
            smartDashesType: smartDashesType,
            smartQuotesType: smartQuotesType,
            enableSuggestions: enableSuggestions,
            maxLengthEnforcement: maxLengthEnforcement,
            maxLines: maxLines,
            minLines: minLines,
            expands: expands,
            maxLength: maxLength,
            onChanged: onChanged,
            onTapAlwaysCalled: onTapAlwaysCalled,
            onTapOutside: onTapOutside,
            onEditingComplete: onEditingComplete,
            onFieldSubmitted: onFieldSubmitted,
            inputFormatters: inputFormatters,
            cursorWidth: cursorWidth,
            cursorHeight: cursorHeight,
            cursorRadius: cursorRadius,
            cursorColor: cursorColor,
            cursorErrorColor: cursorErrorColor,
            scrollPadding: scrollPadding,
            scrollPhysics: scrollPhysics,
            keyboardAppearance: keyboardAppearance,
            enableInteractiveSelection: enableInteractiveSelection,
            selectionControls: selectionControls,
            buildCounter: buildCounter,
            autofillHints: autofillHints,
            scrollController: scrollController,
            enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
            mouseCursor: mouseCursor,
            contextMenuBuilder: contextMenuBuilder,
            spellCheckConfiguration: spellCheckConfiguration,
            magnifierConfiguration: magnifierConfiguration,
            undoController: undoController,
            onAppPrivateCommand: onAppPrivateCommand,
            cursorOpacityAnimates: cursorOpacityAnimates,
            selectionHeightStyle: selectionHeightStyle,
            selectionWidthStyle: selectionWidthStyle,
            dragStartBehavior: dragStartBehavior,
            contentInsertionConfiguration: contentInsertionConfiguration,
            clipBehavior: clipBehavior,
            scribbleEnabled: scribbleEnabled,
            canRequestFocus: canRequestFocus,
            onSaved: onSaved,
            validator: validator,
            required: required,
          ),
        );

  TxMultiPickerFormFieldTile.custom({
    required MultiPickVoidCallback<T>? onPickTap,
    required String? Function(T data)? displayTextMapper,
    super.initialValue,
    int? minCount,
    int? maxCount,
    String splitCharacter = '、',
    super.key,
    super.controller,
    super.focusNode,
    super.decoration,
    super.keyboardType,
    super.textCapitalization,
    super.textInputAction,
    super.style,
    super.strutStyle,
    super.textDirection,
    super.textAlign,
    super.textAlignVertical,
    super.autofocus,
    super.readOnly = true,
    super.showCursor,
    super.obscuringCharacter,
    super.obscureText,
    super.autocorrect,
    super.smartDashesType,
    super.smartQuotesType,
    super.enableSuggestions,
    super.maxLengthEnforcement,
    super.maxLines,
    super.minLines,
    super.expands,
    super.maxLength,
    super.onChanged,
    super.onTapAlwaysCalled,
    super.onTapOutside,
    super.onEditingComplete,
    super.onFieldSubmitted,
    super.inputFormatters,
    super.cursorWidth,
    super.cursorHeight,
    super.cursorColor,
    super.cursorRadius,
    super.cursorErrorColor,
    super.keyboardAppearance,
    super.scrollPadding,
    super.enableInteractiveSelection,
    super.selectionControls,
    super.buildCounter,
    super.scrollPhysics,
    super.autofillHints,
    super.scrollController,
    super.enableIMEPersonalizedLearning,
    super.mouseCursor,
    super.contextMenuBuilder,
    super.spellCheckConfiguration,
    super.magnifierConfiguration,
    super.undoController,
    super.onAppPrivateCommand,
    super.cursorOpacityAnimates,
    super.selectionHeightStyle,
    super.selectionWidthStyle,
    super.dragStartBehavior,
    super.contentInsertionConfiguration,
    super.statesController,
    super.clipBehavior,
    super.scribbleEnabled,
    super.canRequestFocus,
    super.onSaved,
    super.validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    bool? required,
    super.labelBuilder,
    super.labelText,
    super.padding,
    super.actions,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailing,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.minLeadingWidth,
    super.minLabelWidth,
    super.minVerticalPadding,
    super.dense,
  }) : super(
          required: required == true && minCount != null && minCount > 0,
          field: TxMultiPickerFormField<T, V>.custom(
            onPickTap: onPickTap,
            displayTextMapper: displayTextMapper,
            initialValue: initialValue,
            minCount: minCount,
            maxCount: maxCount,
            splitCharacter: splitCharacter,
            enabled: enabled,
            autovalidateMode: autovalidateMode,
            restorationId: restorationId,
            controller: controller,
            focusNode: focusNode,
            decoration: decoration,
            keyboardType: keyboardType,
            textInputAction: textInputAction,
            style: style,
            strutStyle: strutStyle,
            textAlign: textAlign,
            textAlignVertical: textAlignVertical,
            textDirection: textDirection,
            textCapitalization: textCapitalization,
            autofocus: autofocus,
            statesController: statesController,
            readOnly: readOnly,
            showCursor: showCursor,
            obscuringCharacter: obscuringCharacter,
            obscureText: obscureText,
            autocorrect: autocorrect,
            smartDashesType: smartDashesType,
            smartQuotesType: smartQuotesType,
            enableSuggestions: enableSuggestions,
            maxLengthEnforcement: maxLengthEnforcement,
            maxLines: maxLines,
            minLines: minLines,
            expands: expands,
            maxLength: maxLength,
            onChanged: onChanged,
            onTapAlwaysCalled: onTapAlwaysCalled,
            onTapOutside: onTapOutside,
            onEditingComplete: onEditingComplete,
            onFieldSubmitted: onFieldSubmitted,
            inputFormatters: inputFormatters,
            cursorWidth: cursorWidth,
            cursorHeight: cursorHeight,
            cursorRadius: cursorRadius,
            cursorColor: cursorColor,
            cursorErrorColor: cursorErrorColor,
            scrollPadding: scrollPadding,
            scrollPhysics: scrollPhysics,
            keyboardAppearance: keyboardAppearance,
            enableInteractiveSelection: enableInteractiveSelection,
            selectionControls: selectionControls,
            buildCounter: buildCounter,
            autofillHints: autofillHints,
            scrollController: scrollController,
            enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
            mouseCursor: mouseCursor,
            contextMenuBuilder: contextMenuBuilder,
            spellCheckConfiguration: spellCheckConfiguration,
            magnifierConfiguration: magnifierConfiguration,
            undoController: undoController,
            onAppPrivateCommand: onAppPrivateCommand,
            cursorOpacityAnimates: cursorOpacityAnimates,
            selectionHeightStyle: selectionHeightStyle,
            selectionWidthStyle: selectionWidthStyle,
            dragStartBehavior: dragStartBehavior,
            contentInsertionConfiguration: contentInsertionConfiguration,
            clipBehavior: clipBehavior,
            scribbleEnabled: scribbleEnabled,
            canRequestFocus: canRequestFocus,
            onSaved: onSaved,
            validator: validator,
            required: required,
          ),
        );
}
