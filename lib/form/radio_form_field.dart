import 'package:flutter/material.dart';

import '../field/picker_field.dart';
import '../field/radio_field.dart';
import '../form.dart';
import '../utils/basic_types.dart';
import 'form_field.dart';

/// Radio单选Form 组件
@Deprecated(
  'Use TxRadioFormFieldTile instead. '
  'This feature was deprecated after v0.3.0.',
)
class RadioFormField<T, V> extends TxRadioFormFieldTile<T, V> {
  @Deprecated(
    'Use TxRadioFormFieldTile instead. '
    'This feature was deprecated after v0.3.0.',
  )
  RadioFormField({
    required super.labelMapper,
    required List<T>? sources,
    super.initialData,
    super.valueMapper,
    super.enabledMapper,
    super.onChanged,
    super.key,
    super.onSaved,
    super.validator,
    super.initialValue,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.required,
    Widget? label,
    super.labelText,
    Color? backgroundColor,
    Axis? direction,
    super.padding,
    super.actionsBuilder,
    super.labelStyle,
    super.horizontalGap,
    super.minLabelWidth,
  }) : super(
          source: sources ?? [],
          labelBuilder: label == null ? null : (context) => label,
          tileColor: backgroundColor,
          layoutDirection: direction,
        );
}

/// [builder] 构建组件为 Radio 单项选择框的 [FormField]
class TxRadioFormField<T, V> extends TxFormField<T> {
  TxRadioFormField({
    required List<T> source,
    required ValueMapper<T, String> labelMapper,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    T? initialData,
    V? initialValue,
    double? spacing,
    double? runSpacing,
    WrapAlignment? alignment,
    WrapAlignment? runAlignment,
    WrapCrossAlignment? crossAxisAlignment,
    FocusNode? focusNode,
    super.key,
    super.onSaved,
    FormFieldValidator<T>? validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.decoration,
    super.onChanged,
    super.required,
    MouseCursor? mouseCursor,
    Color? activeColor,
    MaterialStateProperty<Color?>? fillColor,
    Color? focusColor,
    Color? hoverColor,
    MaterialStateProperty<Color?>? overlayColor,
    double? splashRadius,
    MaterialTapTargetSize? materialTapTargetSize,
    IndexedValueMapper<T, bool>? toggleableMapper,
    ListTileControlAffinity? controlAffinity,
    EdgeInsetsGeometry? cellPadding,
    ShapeBorder? cellShape,
    TextStyle? cellLabelStyle,
    bool? useCupertinoCheckmarkStyle,
    Color? textColor,
  }) : super(
          builder: (field) => UnmanagedRestorationScope(
            bucket: field.bucket,
            child: TxRadioField(
              source: source,
              labelMapper: labelMapper,
              valueMapper: valueMapper,
              enabledMapper: enabledMapper,
              initialData: field.value,
              onChanged: field.didChange,
              runSpacing: runSpacing,
              spacing: spacing,
              decoration: field.effectiveDecoration,
              alignment: alignment,
              runAlignment: runAlignment,
              crossAxisAlignment: crossAxisAlignment,
              focusNode: focusNode,
              enabled: enabled,
              mouseCursor: mouseCursor,
              activeColor: activeColor,
              fillColor: fillColor,
              focusColor: focusColor,
              hoverColor: hoverColor,
              overlayColor: overlayColor,
              splashRadius: splashRadius,
              materialTapTargetSize: materialTapTargetSize,
              controlAffinity: controlAffinity,
              cellPadding: cellPadding,
              cellShape: cellShape,
              labelStyle: cellLabelStyle,
              useCupertinoCheckmarkStyle: useCupertinoCheckmarkStyle,
              toggleableMapper: toggleableMapper,
              textColor: textColor,
            ),
          ),
          initialValue: TxPickerField.initData<T, V>(
            source,
            initialData,
            initialValue,
            valueMapper,
          ),
          validator: (value) => TxPickerFormField.generateValidator<T>(
            value,
            validator,
            required,
          ),
        );
}

/// field 为 Radio 单项选择框表单的 [TxWrapFormFieldTile]
class TxRadioFormFieldTile<T, V> extends TxFormFieldTile<T> {
  TxRadioFormFieldTile({
    required List<T> source,
    required ValueMapper<T, String> labelMapper,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    T? initialData,
    V? initialValue,
    double? spacing,
    double? runSpacing,
    WrapAlignment? alignment,
    WrapAlignment? runAlignment,
    WrapCrossAlignment? crossAxisAlignment,
    FocusNode? focusNode,
    super.key,
    super.onSaved,
    FormFieldValidator<T>? validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.decoration,
    super.onChanged,
    super.required,
    MouseCursor? mouseCursor,
    Color? activeColor,
    MaterialStateProperty<Color?>? fillColor,
    Color? focusColor,
    Color? hoverColor,
    MaterialStateProperty<Color?>? overlayColor,
    double? splashRadius,
    MaterialTapTargetSize? materialTapTargetSize,
    IndexedValueMapper<T, bool>? toggleableMapper,
    ListTileControlAffinity? controlAffinity,
    EdgeInsetsGeometry? cellPadding,
    ShapeBorder? cellShape,
    TextStyle? cellLabelStyle,
    Color? cellTextColor,
    bool? useCupertinoCheckmarkStyle,
    super.labelBuilder,
    super.labelText,
    super.padding,
    super.actionsBuilder,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailingBuilder,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.onTap,
    super.minLeadingWidth,
    super.minLabelWidth,
    super.minVerticalPadding,
    super.dense,
  }) : super(
          fieldBuilder: (field) => TxRadioField(
            source: source,
            labelMapper: labelMapper,
            valueMapper: valueMapper,
            enabledMapper: enabledMapper,
            initialData: field.value,
            onChanged: field.didChange,
            runSpacing: runSpacing,
            spacing: spacing,
            decoration: field.effectiveDecoration,
            alignment: alignment,
            runAlignment: runAlignment,
            crossAxisAlignment: crossAxisAlignment,
            focusNode: focusNode,
            enabled: enabled,
            mouseCursor: mouseCursor,
            activeColor: activeColor,
            fillColor: fillColor,
            focusColor: focusColor,
            hoverColor: hoverColor,
            overlayColor: overlayColor,
            splashRadius: splashRadius,
            materialTapTargetSize: materialTapTargetSize,
            controlAffinity: controlAffinity,
            cellPadding: cellPadding,
            cellShape: cellShape,
            labelStyle: cellLabelStyle,
            useCupertinoCheckmarkStyle: useCupertinoCheckmarkStyle,
            toggleableMapper: toggleableMapper,
            textColor: cellTextColor,
          ),
          initialValue: TxPickerField.initData<T, V>(
            source,
            initialData,
            initialValue,
            valueMapper,
          ),
          validator: (value) => TxPickerFormField.generateValidator<T>(
            value,
            validator,
            required,
          ),
        );
}
