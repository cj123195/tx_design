import 'package:flutter/material.dart';

import '../field/picker_field.dart';
import '../field/radio_field.dart';
import '../form.dart';
import '../utils/basic_types.dart';
import 'form_field.dart';

/// Radio单选Form 组件
@Deprecated(
  'Use TxRadioFormFieldTile instead. '
  'This feature was deprecated after v0.3.0.',
)
class RadioFormField<T, V> extends TxRadioFormField<T, V> {
  @Deprecated(
    'Use TxRadioFormFieldTile instead. '
    'This feature was deprecated after v0.3.0.',
  )
  RadioFormField({
    required super.labelMapper,
    required List<T>? sources,
    super.initialData,
    super.valueMapper,
    super.enabledMapper,
    super.onChanged,
    super.key,
    super.onSaved,
    super.validator,
    super.initialValue,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.required,
    Widget? label,
    super.labelText,
    super.labelTextAlign,
    super.labelOverflow,
    Color? backgroundColor,
    Axis? direction,
    super.padding,
    super.actionsBuilder,
    super.labelStyle,
    super.horizontalGap,
    super.minLabelWidth,
  }) : super(
          source: sources ?? [],
          label: label,
          tileColor: backgroundColor,
          layoutDirection: direction,
        );
}

/// 单项选择框表单
class TxRadioFormField<T, V> extends TxFormField<T> {
  TxRadioFormField({
    required List<T> source,
    required ValueMapper<T, String> labelMapper,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    T? initialData,
    V? initialValue,
    double? spacing,
    double? runSpacing,
    WrapAlignment? alignment,
    WrapAlignment? runAlignment,
    WrapCrossAlignment? crossAxisAlignment,
    FocusNode? focusNode,
    super.key,
    super.onSaved,
    FormFieldValidator<T>? validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.decoration,
    super.onChanged,
    super.required,
    super.bordered,
    IndexedValueMapper<T, Widget>? avatarBuilder,
    IndexedValueMapper<T, String>? tooltipMapper,
    super.label,
    super.labelText,
    super.labelTextAlign,
    super.labelOverflow,
    super.padding,
    super.actionsBuilder,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailingBuilder,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.onTap,
    super.minLeadingWidth,
    super.minLabelWidth,
    super.minVerticalPadding,
    super.dense,
    super.colon,
    super.focusColor,
  }) : super(
          builder: (field) => TxRadioField(
            source: source,
            labelMapper: labelMapper,
            valueMapper: valueMapper,
            enabledMapper: enabledMapper,
            initialData: field.value,
            onChanged: field.didChange,
            runSpacing: runSpacing,
            spacing: spacing,
            decoration: field.effectiveDecoration,
            alignment: alignment,
            runAlignment: runAlignment,
            crossAxisAlignment: crossAxisAlignment,
            focusNode: focusNode,
            enabled: enabled,
            avatarBuilder: avatarBuilder,
            tooltipMapper: tooltipMapper,
            visualDensity: visualDensity,
            label: field.effectiveLabel,
            labelTextAlign: labelTextAlign,
            padding: padding,
            actionsBuilder: actionsBuilder,
            trailingBuilder: trailingBuilder,
            labelStyle: labelStyle,
            horizontalGap: horizontalGap,
            tileColor: tileColor,
            layoutDirection: layoutDirection,
            leading: leading,
            shape: shape,
            iconColor: iconColor,
            textColor: textColor,
            leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
            minLeadingWidth: minLeadingWidth,
            minLabelWidth: minLabelWidth,
            minVerticalPadding: minVerticalPadding,
            dense: dense,
            colon: colon,
            focusColor: focusColor,
          ),
          initialValue: TxPickerField.initData<T, V>(
            source,
            initialData,
            initialValue,
            valueMapper,
          ),
          validator: (value) => TxPickerFormField.generateValidator<T>(
            value,
            validator,
            required,
          ),
        );
}
