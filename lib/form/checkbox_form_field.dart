import 'package:flutter/material.dart';

import '../field/checkbox_field.dart';
import '../field/multi_picker_field.dart';
import '../utils/basic_types.dart';
import 'multi_picker_form_field.dart';
import 'wrap_form_field.dart';

/// Checkbox多选Form组件
///
@Deprecated(
  'Use TxCheckboxFormFieldTile instead. '
  'This feature was deprecated after v0.3.0.',
)
class CheckboxFormField<T, V> extends TxCheckboxFormFieldTile<T, V> {
  @Deprecated(
    'Use TxCheckboxFormFieldTile instead. '
    'This feature was deprecated after v0.3.0.',
  )
  CheckboxFormField({
    required super.labelMapper,
    required List<T> sources,
    super.initialData,
    super.valueMapper,
    super.enabledMapper,
    int? minPickNumber,
    int? maxPickNumber,
    super.onChanged,
    super.key,
    super.onSaved,
    super.validator,
    super.initialValue,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.required,
    Widget? label,
    super.labelText,
    Color? backgroundColor,
    Axis? direction,
    super.padding,
    super.actions,
    super.labelStyle,
    super.horizontalGap,
    super.minLabelWidth,
  }) : super(
          labelBuilder: label == null ? null : (context) => label,
          source: sources,
          minCount: minPickNumber,
          maxCount: maxPickNumber,
          layoutDirection: direction,
          tileColor: backgroundColor,
        );
}

/// [builder] 构建的组件为 [TxCheckboxField] 的 [TxWrapFormField]
class TxCheckboxFormField<T, V> extends TxWrapFormField<List<T>> {
  TxCheckboxFormField({
    required List<T> source,
    required ValueMapper<T, String> labelMapper,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    List<T>? initialData,
    List<V>? initialValue,
    int? minCount,
    int? maxCount,
    super.onChanged,
    super.runSpacing,
    super.spacing,
    super.alignment,
    super.runAlignment,
    super.crossAxisAlignment,
    super.decoration,
    super.focusNode,
    MouseCursor? mouseCursor,
    Color? textColor,
    Color? activeColor,
    MaterialStateProperty<Color?>? fillColor,
    Color? checkColor,
    Color? hoverColor,
    MaterialStateProperty<Color?>? overlayColor,
    double? splashRadius,
    MaterialTapTargetSize? materialTapTargetSize,
    IndexedValueMapper<T, bool>? errorMapper,
    ListTileControlAffinity? controlAffinity,
    EdgeInsetsGeometry? checkboxPadding,
    IndexedValueMapper<T, bool>? tristateMapper,
    OutlinedBorder? checkboxShape,
    IndexedValueMapper<T, String>? checkboxSemanticLabelMapper,
    BorderSide? checkboxSide,
    ShapeBorder? checkboxCellShape,
    TextStyle? labelStyle,
    super.key,
    super.onSaved,
    FormFieldValidator<List<T>>? validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.required,
  }) : super(
          builder: (field) {
            void onChangedHandler(List<T>? value) {
              field.didChange(value);
              onChanged?.call(value);
            }

            final InputDecoration effectiveDecoration =
                (decoration ?? const InputDecoration())
                    .copyWith(errorText: field.errorText);

            return UnmanagedRestorationScope(
              bucket: field.bucket,
              child: TxCheckboxField(
                source: source,
                labelMapper: labelMapper,
                valueMapper: valueMapper,
                enabledMapper: enabledMapper,
                initialData: field.value,
                minCount: minCount,
                maxCount: maxCount,
                onChanged: onChangedHandler,
                runSpacing: runSpacing,
                spacing: spacing,
                decoration: effectiveDecoration,
                alignment: alignment,
                runAlignment: runAlignment,
                crossAxisAlignment: crossAxisAlignment,
                focusNode: focusNode,
                enabled: enabled,
                mouseCursor: mouseCursor,
                activeColor: activeColor,
                fillColor: fillColor,
                checkColor: checkColor,
                hoverColor: hoverColor,
                overlayColor: overlayColor,
                splashRadius: splashRadius,
                materialTapTargetSize: materialTapTargetSize,
                errorMapper: errorMapper,
                controlAffinity: controlAffinity,
                checkboxPadding: checkboxPadding,
                tristateMapper: tristateMapper,
                checkboxShape: checkboxShape,
                checkboxSemanticLabelMapper: checkboxSemanticLabelMapper,
                checkboxSide: checkboxSide,
                checkboxCellShape: checkboxCellShape,
                textColor: textColor,
                labelStyle: labelStyle,
              ),
            );
          },
          initialValue: TxMultiPickerField.initData<T, V>(
            source,
            initialData,
            initialValue,
            valueMapper,
          ),
          validator: (value) => TxMultiPickerFormField.generateValidator<T>(
            value,
            validator,
            required,
            minCount,
            maxCount,
          ),
        );
}

/// [field] 为 [TxCheckboxFormField] 的 [TxWrapFormFieldTile]
class TxCheckboxFormFieldTile<T, V> extends TxWrapFormFieldTile<List<T>> {
  TxCheckboxFormFieldTile({
    required List<T> source,
    required ValueMapper<T, String> labelMapper,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    List<T>? initialData,
    List<V>? initialValue,
    int? minCount,
    int? maxCount,
    super.onChanged,
    super.runSpacing,
    super.spacing,
    super.alignment,
    super.runAlignment,
    super.crossAxisAlignment,
    super.decoration,
    super.focusNode,
    MouseCursor? mouseCursor,
    Color? activeColor,
    MaterialStateProperty<Color?>? fillColor,
    Color? checkColor,
    Color? hoverColor,
    MaterialStateProperty<Color?>? overlayColor,
    double? splashRadius,
    MaterialTapTargetSize? materialTapTargetSize,
    IndexedValueMapper<T, bool>? errorMapper,
    ListTileControlAffinity? controlAffinity,
    EdgeInsetsGeometry? checkboxPadding,
    IndexedValueMapper<T, bool>? tristateMapper,
    OutlinedBorder? checkboxShape,
    IndexedValueMapper<T, String>? checkboxSemanticLabelMapper,
    BorderSide? checkboxSide,
    ShapeBorder? checkboxCellShape,
    TextStyle? cellLabelStyle,
    super.key,
    super.labelBuilder,
    super.labelText,
    super.padding,
    super.actions,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailing,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.enabled,
    super.onTap,
    super.minLeadingWidth,
    super.minLabelWidth,
    super.minVerticalPadding,
    super.dense,
    super.onSaved,
    super.validator,
    super.restorationId,
    super.autovalidateMode,
    super.required,
  }) : super(
          field: TxCheckboxFormField<T, V>(
            source: source,
            labelMapper: labelMapper,
            valueMapper: valueMapper,
            enabledMapper: enabledMapper,
            initialData: initialData,
            initialValue: initialValue,
            minCount: minCount,
            maxCount: maxCount,
            onChanged: onChanged,
            runSpacing: runSpacing,
            spacing: spacing,
            decoration: decoration,
            alignment: alignment,
            runAlignment: runAlignment,
            crossAxisAlignment: crossAxisAlignment,
            focusNode: focusNode,
            enabled: enabled,
            mouseCursor: mouseCursor,
            activeColor: activeColor,
            fillColor: fillColor,
            checkColor: checkColor,
            hoverColor: hoverColor,
            overlayColor: overlayColor,
            splashRadius: splashRadius,
            materialTapTargetSize: materialTapTargetSize,
            errorMapper: errorMapper,
            controlAffinity: controlAffinity,
            checkboxPadding: checkboxPadding,
            tristateMapper: tristateMapper,
            checkboxShape: checkboxShape,
            checkboxSemanticLabelMapper: checkboxSemanticLabelMapper,
            checkboxSide: checkboxSide,
            checkboxCellShape: checkboxCellShape,
            textColor: textColor,
            onSaved: onSaved,
            validator: validator,
            required: required,
            autovalidateMode: autovalidateMode,
            restorationId: restorationId,
            labelStyle: cellLabelStyle,
          ),
        );
}
