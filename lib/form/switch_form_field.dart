import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';

import '../field/switch_field.dart';
import 'form_field_tile.dart';

/// [builder] 构造的组件为 [TxSwitchField] 的 [FormField]。
class TxSwitchFormField extends FormField<bool> {
  TxSwitchFormField({
    InputDecoration? decoration,
    ValueChanged<bool>? onChanged,
    Color? activeColor,
    Color? activeTrackColor,
    Color? inactiveThumbColor,
    Color? inactiveTrackColor,
    ImageProvider? activeThumbImage,
    ImageErrorListener? onActiveThumbImageError,
    ImageProvider? inactiveThumbImage,
    ImageErrorListener? onInactiveThumbImageError,
    MaterialStateProperty<Color?>? thumbColor,
    MaterialStateProperty<Color?>? trackColor,
    MaterialStateProperty<Color?>? trackOutlineColor,
    MaterialStateProperty<double?>? trackOutlineWidth,
    MaterialStateProperty<Icon?>? thumbIcon,
    MaterialTapTargetSize? materialTapTargetSize,
    DragStartBehavior? dragStartBehavior,
    MouseCursor? mouseCursor,
    MaterialStateProperty<Color?>? overlayColor,
    double? splashRadius,
    Color? focusColor,
    FocusNode? focusNode,
    ValueChanged<bool>? onFocusChange,
    bool? autofocus,
    Color? hoverColor,
    bool? applyCupertinoTheme,
    TextDirection? textDirection,
    super.key,
    super.onSaved,
    super.validator,
    super.initialValue,
    super.enabled = true,
    super.autovalidateMode,
    super.restorationId,
  }) : super(
          builder: (field) {
            void onChangedHandler(bool value) {
              field.didChange(value);
              onChanged?.call(value);
            }

            final InputDecoration effectiveDecoration =
                (decoration ?? const InputDecoration())
                    .copyWith(errorText: field.errorText);

            return UnmanagedRestorationScope(
              bucket: field.bucket,
              child: TxSwitchField(
                initialValue: field.value,
                onChanged: onChangedHandler,
                activeColor: activeColor,
                activeTrackColor: activeTrackColor,
                inactiveThumbColor: inactiveThumbColor,
                activeThumbImage: activeThumbImage,
                onActiveThumbImageError: onActiveThumbImageError,
                inactiveThumbImage: inactiveThumbImage,
                onInactiveThumbImageError: onInactiveThumbImageError,
                materialTapTargetSize: materialTapTargetSize,
                thumbColor: thumbColor,
                trackColor: trackColor,
                trackOutlineColor: trackOutlineColor,
                trackOutlineWidth: trackOutlineWidth,
                thumbIcon: thumbIcon,
                dragStartBehavior: dragStartBehavior,
                mouseCursor: mouseCursor,
                focusColor: focusColor,
                hoverColor: hoverColor,
                overlayColor: overlayColor,
                splashRadius: splashRadius,
                focusNode: focusNode,
                onFocusChange: onFocusChange,
                autofocus: autofocus,
                applyCupertinoTheme: applyCupertinoTheme,
                enabled: enabled,
                decoration: effectiveDecoration,
                textDirection: textDirection,
              ),
            );
          },
        );
}

/// [field] 为 [TxSwitchFormField] 的 [TxFormFieldTile]。
class TxSwitchFormFieldTile extends TxFormFieldTile<bool> {
  TxSwitchFormFieldTile({
    InputDecoration? decoration,
    bool? initialValue,
    ValueChanged<bool>? onChanged,
    Color? activeColor,
    Color? activeTrackColor,
    Color? inactiveThumbColor,
    Color? inactiveTrackColor,
    ImageProvider? activeThumbImage,
    ImageErrorListener? onActiveThumbImageError,
    ImageProvider? inactiveThumbImage,
    ImageErrorListener? onInactiveThumbImageError,
    MaterialStateProperty<Color?>? thumbColor,
    MaterialStateProperty<Color?>? trackColor,
    MaterialStateProperty<Color?>? trackOutlineColor,
    MaterialStateProperty<double?>? trackOutlineWidth,
    MaterialStateProperty<Icon?>? thumbIcon,
    MaterialTapTargetSize? materialTapTargetSize,
    DragStartBehavior? dragStartBehavior,
    MouseCursor? mouseCursor,
    MaterialStateProperty<Color?>? overlayColor,
    double? splashRadius,
    Color? focusColor,
    FocusNode? focusNode,
    ValueChanged<bool>? onFocusChange,
    bool? autofocus,
    Color? hoverColor,
    bool? applyCupertinoTheme,
    TextDirection? textDirection,
    super.key,
    super.labelBuilder,
    super.labelText,
    super.padding,
    super.actions,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.trailing,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.enabled,
    super.onTap,
    super.minLeadingWidth,
    super.dense,
    super.minLabelWidth,
    super.minVerticalPadding,
    super.required,
    super.autovalidateMode,
    super.onSaved,
    super.restorationId,
    super.validator,
  }) : super(
          layoutDirection: Axis.horizontal,
          field: TxSwitchFormField(
            initialValue: initialValue,
            onChanged: onChanged,
            activeColor: activeColor,
            activeTrackColor: activeTrackColor,
            inactiveThumbColor: inactiveThumbColor,
            activeThumbImage: activeThumbImage,
            onActiveThumbImageError: onActiveThumbImageError,
            inactiveThumbImage: inactiveThumbImage,
            onInactiveThumbImageError: onInactiveThumbImageError,
            materialTapTargetSize: materialTapTargetSize,
            thumbColor: thumbColor,
            trackColor: trackColor,
            trackOutlineColor: trackOutlineColor,
            trackOutlineWidth: trackOutlineWidth,
            thumbIcon: thumbIcon,
            dragStartBehavior: dragStartBehavior,
            mouseCursor: mouseCursor,
            focusColor: focusColor,
            hoverColor: hoverColor,
            overlayColor: overlayColor,
            splashRadius: splashRadius,
            focusNode: focusNode,
            onFocusChange: onFocusChange,
            autofocus: autofocus,
            applyCupertinoTheme: applyCupertinoTheme,
            enabled: enabled,
            decoration: decoration,
            textDirection: textDirection ?? TextDirection.rtl,
            autovalidateMode: autovalidateMode,
            validator: validator,
            onSaved: onSaved,
            restorationId: restorationId,
          ),
        );
}
