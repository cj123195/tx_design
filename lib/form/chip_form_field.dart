import 'package:flutter/material.dart';

import '../field/chip_field.dart';
import '../field/multi_picker_field.dart';
import '../utils/basic_types.dart';
import 'multi_picker_form_field.dart';
import 'wrap_form_field.dart';

/// [builder] 构建的组件为 [TxChipField] 的 [TxWrapFormField]
class TxChipFormField<T, V> extends TxWrapFormField<List<T>> {
  TxChipFormField({
    required List<T> source,
    required ValueMapper<T, String> labelMapper,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    List<T>? initialData,
    List<V>? initialValue,
    int? minCount,
    int? maxCount,
    super.onChanged,
    super.runSpacing,
    super.spacing,
    super.alignment,
    super.runAlignment,
    super.crossAxisAlignment,
    super.decoration,
    super.focusNode,
    IndexedValueMapper<T, Widget>? avatarBuilder,
    TextStyle? labelStyle,
    EdgeInsetsGeometry? labelPadding,
    double? pressElevation,
    Color? selectedColor,
    Color? disabledColor,
    IndexedValueMapper<T, String>? tooltipMapper,
    BorderSide? chipSide,
    OutlinedBorder? chipShape,
    Clip? clipBehavior,
    MaterialStateProperty<Color?>? chipColor,
    Color? chipBackgroundColor,
    EdgeInsetsGeometry? chipPadding,
    VisualDensity? visualDensity,
    MaterialTapTargetSize? materialTapTargetSize,
    double? elevation,
    Color? shadowColor,
    Color? surfaceTintColor,
    IconThemeData? iconTheme,
    Color? selectedShadowColor,
    bool? showCheckmark,
    Color? checkmarkColor,
    ShapeBorder? avatarBorder,
    super.key,
    super.onSaved,
    FormFieldValidator<List<T>>? validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.required,
  }) : super(
          builder: (field) {
            void onChangedHandler(List<T>? value) {
              field.didChange(value);
              onChanged?.call(value);
            }

            final InputDecoration effectiveDecoration =
                (decoration ?? const InputDecoration())
                    .copyWith(errorText: field.errorText);

            return UnmanagedRestorationScope(
              bucket: field.bucket,
              child: TxChipField(
                source: source,
                valueMapper: valueMapper,
                enabledMapper: enabledMapper,
                initialData: field.value,
                minCount: minCount,
                maxCount: maxCount,
                onChanged: onChangedHandler,
                runSpacing: runSpacing,
                spacing: spacing,
                decoration: effectiveDecoration,
                alignment: alignment,
                runAlignment: runAlignment,
                crossAxisAlignment: crossAxisAlignment,
                focusNode: focusNode,
                enabled: enabled,
                labelMapper: labelMapper,
                labelStyle: labelStyle,
                labelPadding: labelPadding,
                pressElevation: pressElevation,
                selectedColor: selectedColor,
                disabledColor: disabledColor,
                tooltipMapper: tooltipMapper,
                chipSide: chipSide,
                chipShape: chipShape,
                clipBehavior: clipBehavior,
                chipColor: chipColor,
                chipBackgroundColor: chipBackgroundColor,
                chipPadding: chipPadding,
                visualDensity: visualDensity,
                materialTapTargetSize: materialTapTargetSize,
                elevation: elevation,
                shadowColor: shadowColor,
                surfaceTintColor: surfaceTintColor,
                iconTheme: iconTheme,
                selectedShadowColor: selectedShadowColor,
                showCheckmark: showCheckmark,
                checkmarkColor: checkmarkColor,
              ),
            );
          },
          initialValue: TxMultiPickerField.initData<T, V>(
            source,
            initialData,
            initialValue,
            valueMapper,
          ),
          validator: (value) => TxMultiPickerFormField.generateValidator<T>(
            value,
            validator,
            required,
            minCount,
            maxCount,
          ),
        );
}

/// [field] 为 [TxChipFormField] 的 [TxWrapFormFieldTile]
class TxChipFormFieldTile<T, V> extends TxWrapFormFieldTile<List<T>> {
  TxChipFormFieldTile({
    required List<T> source,
    required ValueMapper<T, String> labelMapper,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    List<T>? initialData,
    List<V>? initialValue,
    int? minCount,
    int? maxCount,
    super.onChanged,
    super.runSpacing,
    super.spacing,
    super.alignment,
    super.runAlignment,
    super.crossAxisAlignment,
    super.decoration,
    super.focusNode,
    IndexedValueMapper<T, Widget>? avatarBuilder,
    TextStyle? chipLabelStyle,
    EdgeInsetsGeometry? chipLabelPadding,
    double? pressElevation,
    Color? selectedColor,
    Color? disabledColor,
    IndexedValueMapper<T, String>? tooltipMapper,
    BorderSide? chipSide,
    OutlinedBorder? chipShape,
    Clip? clipBehavior,
    MaterialStateProperty<Color?>? chipColor,
    Color? chipBackgroundColor,
    EdgeInsetsGeometry? chipPadding,
    MaterialTapTargetSize? materialTapTargetSize,
    double? elevation,
    Color? shadowColor,
    Color? surfaceTintColor,
    IconThemeData? iconTheme,
    Color? selectedShadowColor,
    bool? showCheckmark,
    Color? checkmarkColor,
    ShapeBorder? avatarBorder,
    super.key,
    super.labelBuilder,
    super.labelText,
    super.padding,
    super.actions,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailing,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.enabled,
    super.onTap,
    super.minLeadingWidth,
    super.minLabelWidth,
    super.minVerticalPadding,
    super.dense,
    super.onSaved,
    super.validator,
    super.restorationId,
    super.autovalidateMode,
    super.required,
  }) : super(
          field: TxChipFormField<T, V>(
            source: source,
            labelMapper: labelMapper,
            valueMapper: valueMapper,
            enabledMapper: enabledMapper,
            initialData: initialData,
            initialValue: initialValue,
            minCount: minCount,
            maxCount: maxCount,
            onChanged: onChanged,
            runSpacing: runSpacing,
            spacing: spacing,
            decoration: decoration,
            alignment: alignment,
            runAlignment: runAlignment,
            crossAxisAlignment: crossAxisAlignment,
            focusNode: focusNode,
            enabled: enabled,
            labelStyle: chipLabelStyle,
            labelPadding: chipLabelPadding,
            pressElevation: pressElevation,
            selectedColor: selectedColor,
            disabledColor: disabledColor,
            tooltipMapper: tooltipMapper,
            chipSide: chipSide,
            chipShape: chipShape,
            clipBehavior: clipBehavior,
            chipColor: chipColor,
            chipBackgroundColor: chipBackgroundColor,
            chipPadding: chipPadding,
            visualDensity: visualDensity,
            materialTapTargetSize: materialTapTargetSize,
            elevation: elevation,
            shadowColor: shadowColor,
            surfaceTintColor: surfaceTintColor,
            iconTheme: iconTheme,
            selectedShadowColor: selectedShadowColor,
            showCheckmark: showCheckmark,
            checkmarkColor: checkmarkColor,
            onSaved: onSaved,
            validator: validator,
            required: required,
            autovalidateMode: autovalidateMode,
            restorationId: restorationId,
          ),
        );
}
