import 'package:flutter/material.dart';

import '../field/chip_field.dart';
import '../field/multi_picker_field.dart';
import '../utils/basic_types.dart';
import 'form_field.dart';
import 'multi_picker_form_field.dart';

/// Chip 多选 Form 表单
class TxChipFormField<T, V> extends TxFormField<List<T>> {
  TxChipFormField({
    required List<T> source,
    required ValueMapper<T, String> labelMapper,
    ValueMapper<T, V?>? valueMapper,
    IndexedValueMapper<T, bool>? enabledMapper,
    List<T>? initialData,
    List<V>? initialValue,
    int? minCount,
    int? maxCount,
    double? spacing,
    double? runSpacing,
    WrapAlignment? alignment,
    WrapAlignment? runAlignment,
    WrapCrossAlignment? crossAxisAlignment,
    FocusNode? focusNode,
    super.key,
    super.onSaved,
    FormFieldValidator<List<T>>? validator,
    super.enabled,
    super.autovalidateMode,
    super.restorationId,
    super.decoration,
    super.onChanged,
    super.required,
    super.bordered,
    IndexedValueMapper<T, Widget>? avatarBuilder,
    IndexedValueMapper<T, String>? tooltipMapper,
    super.label,
    super.labelText,
    super.labelTextAlign,
    super.labelOverflow,
    super.padding,
    super.actionsBuilder,
    super.labelStyle,
    super.horizontalGap,
    super.tileColor,
    super.layoutDirection,
    super.trailingBuilder,
    super.leading,
    super.visualDensity,
    super.shape,
    super.iconColor,
    super.textColor,
    super.leadingAndTrailingTextStyle,
    super.onTap,
    super.minLeadingWidth,
    super.minLabelWidth,
    super.minVerticalPadding,
    super.dense,
    super.colon,
    super.focusColor,
  }) : super(
          builder: (field) {
            return TxChipField(
              source: source,
              valueMapper: valueMapper,
              enabledMapper: enabledMapper,
              initialData: field.value,
              minCount: minCount,
              maxCount: maxCount,
              onChanged: field.didChange,
              runSpacing: runSpacing,
              spacing: spacing,
              decoration: field.effectiveDecoration,
              alignment: alignment,
              runAlignment: runAlignment,
              crossAxisAlignment: crossAxisAlignment,
              focusNode: focusNode,
              enabled: enabled,
              labelMapper: labelMapper,
              tooltipMapper: tooltipMapper,
              avatarBuilder: avatarBuilder,
              visualDensity: visualDensity,
              label: field.effectiveLabel,
              labelTextAlign: labelTextAlign,
              padding: padding,
              actionsBuilder: actionsBuilder,
              trailingBuilder: trailingBuilder,
              labelStyle: labelStyle,
              horizontalGap: horizontalGap,
              tileColor: tileColor,
              layoutDirection: layoutDirection,
              leading: leading,
              shape: shape,
              iconColor: iconColor,
              textColor: textColor,
              leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
              minLeadingWidth: minLeadingWidth,
              minLabelWidth: minLabelWidth,
              minVerticalPadding: minVerticalPadding,
              dense: dense,
              colon: colon,
              focusColor: focusColor,
            );
          },
          initialValue: TxMultiPickerField.initData<T, V>(
            source,
            initialData,
            initialValue,
            valueMapper,
          ),
          validator: (value) => TxMultiPickerFormField.generateValidator<T>(
            value,
            validator,
            required,
            minCount,
            maxCount,
          ),
        );
}
